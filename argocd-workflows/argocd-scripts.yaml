---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-scripts
  namespace: argo
data:
  add-to-argocd.sh: |
    #!/bin/sh

    echo "Logging into ArgoCD..."
    argocd login argocd-server.argocd.svc.cluster.local --core --insecure --plaintext --grpc-web --username $USERNAME --password $PASSWORD

    cluster_ready=""
    cluster=$1
    while [ -z "$cluster_ready" ]
    do
        sleep 20
        kubectl get cluster $cluster -n autoenvs
        cluster_ready=$(kubectl get cluster $cluster -o json -n autoenvs | jq -r '. | select(.status.phase=="Provisioned")')
    done

    # Not sure why in-cluster config isn't working for clusterctl so hacking the kubeconfig...
    echo "Applying hack..."
    kubectl config set-cluster in-cluster --server=https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --embed-certs=true ;
    kubectl config set-credentials clusterctl --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) ;
    kubectl config set-context in-cluster --cluster in-cluster --user clusterctl --namespace argocd ;
    kubectl config use-context in-cluster ;

    echo "Setting kubeconfig..."
    clusterctl get kubeconfig $cluster -n autoenvs > $HOME/.kube/my-vcluster.yaml
    export KUBECONFIG="$HOME/.kube/config:$HOME/.kube/my-vcluster.yaml"

    echo "Changing kubectl context..."
    kubectl config set-context $cluster --cluster my-vcluster --user my-vcluster

    echo "Adding cluster $cluster to ArgoCD..."
    argocd cluster add $cluster --label provider=vcluster -y --upsert --insecure

    echo "All done!"

  remove-from-argocd.sh: |
    #!/bin/sh

    cluster=$1

    argocd login argocd-server.argocd.svc.cluster.local --core --insecure --plaintext --grpc-web --username $USERNAME --password $PASSWORD

    # Not sure why in-cluster config isn't working for clusterctl so hacking the kubeconfig...
    kubectl config set-cluster in-cluster --server=https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --embed-certs=true ;
    kubectl config set-credentials clusterctl --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) ;
    kubectl config set-context in-cluster --cluster in-cluster --user clusterctl --namespace argocd ;
    kubectl config use-context in-cluster ;

    clusterctl get kubeconfig $cluster -n autoenvs > $HOME/.kube/my-vcluster.yaml
    export KUBECONFIG="$HOME/.kube/config:$HOME/.kube/my-vcluster.yaml"

    kubectl config set-context $cluster --cluster my-vcluster --user my-vcluster
    # sometimes the cluster is deleted before we get to this point so we need the || true so that it doesn't
    # fail the job when argocd is unable to remove the ClusterRole & ClusterRoleBinding from the vcluster
    argocd cluster rm $cluster || true